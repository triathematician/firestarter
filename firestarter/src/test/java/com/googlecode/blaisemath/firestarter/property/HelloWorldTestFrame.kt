package com.googlecode.blaisemath.firestarter.property

import com.googlecode.blaisemath.app.ApplicationMenuConfig
import com.googlecode.blaisemath.firestarter.editor.EditorRegistration
import com.googlecode.blaisemath.firestarter.swing.RollupPanel
import com.googlecode.blaisemath.ui.PropertyActionPanel
import org.apache.commons.math.stat.descriptive.SummaryStatistics
import java.awt.BorderLayout
import java.awt.Color
import java.awt.EventQueue
import java.awt.Rectangle
import java.awt.event.ActionEvent
import java.awt.event.ActionListener
import java.util.*
import java.util.function.Predicate
import javax.swing.*

/*
* #%L
* Firestarter
* --
* Copyright (C) 2009 - 2019 Elisha Peterson
* --
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* #L%
*/   class HelloWorldTestFrame private constructor() : JFrame() {
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private fun initComponents() {
        jToolBar1 = JToolBar()
        jButton1 = JButton()
        jSeparator1 = JToolBar.Separator()
        jButton2 = JButton()
        jSeparator2 = JToolBar.Separator()
        jButton3 = JButton()
        jLabel1 = JLabel()
        defaultCloseOperation = WindowConstants.EXIT_ON_CLOSE
        jToolBar1.setRollover(true)
        jButton1.setText("Edit all")
        jButton1.setFocusable(false)
        jButton1.setHorizontalTextPosition(SwingConstants.CENTER)
        jButton1.setVerticalTextPosition(SwingConstants.BOTTOM)
        jButton1.addActionListener(ActionListener { evt: ActionEvent? -> jButton1ActionPerformed(evt) })
        jToolBar1.add(jButton1)
        jToolBar1.add(jSeparator1)
        jButton2.setText("Edit curated")
        jButton2.setFocusable(false)
        jButton2.setHorizontalTextPosition(SwingConstants.CENTER)
        jButton2.setVerticalTextPosition(SwingConstants.BOTTOM)
        jButton2.addActionListener(ActionListener { evt: ActionEvent? -> jButton2ActionPerformed(evt) })
        jToolBar1.add(jButton2)
        jToolBar1.add(jSeparator2)
        jButton3.setText("Edit map")
        jButton3.setFocusable(false)
        jButton3.setHorizontalTextPosition(SwingConstants.CENTER)
        jButton3.setVerticalTextPosition(SwingConstants.BOTTOM)
        jButton3.addActionListener(ActionListener { evt: ActionEvent? -> jButton3ActionPerformed(evt) })
        jToolBar1.add(jButton3)
        contentPane.add(jToolBar1, BorderLayout.NORTH)
        jLabel1.setText("jLabel1")
        contentPane.add(jLabel1, BorderLayout.CENTER)
        pack()
    } // </editor-fold>//GEN-END:initComponents

    private fun jButton1ActionPerformed(evt: ActionEvent?) { //GEN-FIRST:event_jButton1ActionPerformed
        show(this, true, jLabel1)
    } //GEN-LAST:event_jButton1ActionPerformed

    private fun jButton2ActionPerformed(evt: ActionEvent?) { //GEN-FIRST:event_jButton2ActionPerformed
//        PropertySheetDialog.show(this, true, jLabel1,
//                Predicates.in(Arrays.asList("foreground", "background", "text")));
        show(this, true, jLabel1, Predicate { input: String? -> Arrays.asList("foreground", "background", "text").contains(input) })
    } //GEN-LAST:event_jButton2ActionPerformed

    private fun jButton3ActionPerformed(evt: ActionEvent?) { //GEN-FIRST:event_jButton3ActionPerformed
        val typ: MutableMap<String?, Class<*>?> = LinkedHashMap()
        typ["prop 1"] = Int::class.java
        typ["prop 2"] = Color::class.java
        typ["prop 3"] = Double::class.java
        val map: MutableMap<String?, Any?> = LinkedHashMap()
        map["prop 1"] = 10
        map["prop 2"] = Color.white
        map["prop 3"] = 15.5
        show(this, true, map, TestPropertyModel(typ, map))
    } //GEN-LAST:event_jButton3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var jButton1: JButton? = null
    private var jButton2: JButton? = null
    private var jButton3: JButton? = null
    private var jLabel1: JLabel? = null
    private var jSeparator1: JToolBar.Separator? = null
    private var jSeparator2: JToolBar.Separator? = null
    private var jToolBar1: JToolBar? = null // End of variables declaration//GEN-END:variables

    companion object {
        @JvmStatic
        fun main(args: Array<String>) {
            EventQueue.invokeLater { HelloWorldTestFrame().isVisible = true }
        }
    }

    init {
        initComponents()
        EditorRegistration.registerEditors()
        val rollupPanel = RollupPanel()
        rollupPanel.add("Label Properties", PropertySheet.Companion.forBean(jLabel1))
        rollupPanel.add("Rectangle Properties", PropertySheet.Companion.forBean(Rectangle()))
        add(JScrollPane(rollupPanel), BorderLayout.WEST)
    }
}