package com.googlecode.blaisemath.firestarter.property

import com.googlecode.blaisemath.app.ApplicationMenuConfig
import com.googlecode.blaisemath.firestarter.editor.EditorRegistration
import com.googlecode.blaisemath.firestarter.editor.EnumEditor
import com.googlecode.blaisemath.firestarter.property.IndexedBean.Indexed2
import com.googlecode.blaisemath.firestarter.property.IndexedBean.TestEnum
import com.googlecode.blaisemath.firestarter.swing.MPanel
import com.googlecode.blaisemath.firestarter.swing.RollupPanel
import com.googlecode.blaisemath.ui.PropertyActionPanel
import org.apache.commons.math.stat.descriptive.SummaryStatistics
import java.awt.*
import java.awt.event.ActionEvent
import java.awt.event.ActionListener
import java.awt.geom.Point2D
import java.beans.PropertyEditorManager
import javax.swing.*
import javax.swing.event.TreeSelectionEvent
import javax.swing.event.TreeSelectionListener

/*
* #%L
* Firestarter
* --
* Copyright (C) 2009 - 2019 Elisha Peterson
* --
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* #L%
*/   class Testing private constructor() : JFrame() {
    private val selectedBeanPanel: MPanel?
    private val numberBean: NumberBean? = null

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private fun initComponents() {
        indexedBean1 = IndexedBean()
        jScrollPane2 = JScrollPane()
        jTextArea1 = JTextArea()
        jSplitPane1 = JSplitPane()
        jScrollPane3 = JScrollPane()
        rollupPanel2 = RollupPanel()
        jScrollPane4 = JScrollPane()
        jTree1 = JTree(BeanTreeNode(indexedBean1))
        jPanel1 = JPanel()
        jButton1 = JButton()
        defaultCloseOperation = WindowConstants.EXIT_ON_CLOSE
        jTextArea1.setColumns(20)
        jTextArea1.setRows(5)
        jScrollPane2.setViewportView(jTextArea1)
        val center = JSplitPane()
        contentPane.add(center, BorderLayout.CENTER)
        center.add(jScrollPane2, JSplitPane.RIGHT)
        jSplitPane1.setOrientation(JSplitPane.VERTICAL_SPLIT)
        jSplitPane1.setResizeWeight(0.5)
        jSplitPane1.setPreferredSize(Dimension(300, 400))
        jScrollPane3.setViewportView(rollupPanel2)
        jSplitPane1.setBottomComponent(jScrollPane3)
        jTree1.addTreeSelectionListener(TreeSelectionListener { evt: TreeSelectionEvent? -> jTree1ValueChanged(evt) })
        jScrollPane4.setViewportView(jTree1)
        jSplitPane1.setTopComponent(jScrollPane4)
        center.add(jSplitPane1, JSplitPane.LEFT)
        jButton1.setText("jButton1")
        jButton1.setMargin(Insets(2, 2, 2, 2))
        jPanel1.add(jButton1)
        jButton1.addActionListener(ActionListener { e: ActionEvent? -> println(numberBean) })
        contentPane.add(jPanel1, BorderLayout.PAGE_START)
        pack()
    } // </editor-fold>

    private fun jTree1ValueChanged(evt: TreeSelectionEvent?) {
        val obj = (evt.getPath().lastPathComponent as BeanTreeNode).userObject
        selectedBeanPanel.setPrimaryComponent(PropertySheet.Companion.forBean(obj))
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var indexedBean1: IndexedBean? = null
    private var jButton1: JButton? = null
    private var jPanel1: JPanel? = null
    private var jScrollPane2: JScrollPane? = null
    private var jScrollPane3: JScrollPane? = null
    private var jScrollPane4: JScrollPane? = null
    private var jSplitPane1: JSplitPane? = null
    private var jTextArea1: JTextArea? = null
    private var jTree1: JTree? = null
    private var rollupPanel2: RollupPanel? = null // End of variables declaration//GEN-END:variables

    companion object {
        /**
         * @param args the command line arguments
         */
        @JvmStatic
        fun main(args: Array<String>) {
            EventQueue.invokeLater { Testing().isVisible = true }
        }
    }

    init {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName())
        } catch (ignored: Exception) {
        }
        EditorRegistration.registerEditors()
        PropertyEditorManager.registerEditor(TestEnum::class.java, EnumEditor::class.java)
        PropertySheet.Companion.TOOLBAR_VISIBLE_DEFAULT = false
        initComponents()
        selectedBeanPanel = MPanel(JLabel("<html><font size=\"+1\"><b>Selected</b> Bean"), PropertySheet())
        rollupPanel2.add(selectedBeanPanel)
        rollupPanel2.add("Indexed", PropertySheet.Companion.forBean(IndexedBean()))
        rollupPanel2.add("Indexed B", PropertySheet.Companion.forBean(Indexed2()))
        rollupPanel2.add("Indexed Strings", IndexedPropertySheet.Companion.forIndexedProperty(IndexedBean(), "strings"))
        val ps: PropertySheet = PropertySheet.Companion.forBean(CustomBean())
        rollupPanel2.add("Other", ps)
        rollupPanel2.add("Shapes", PropertySheet.Companion.forBean(ShapeBean()))
        rollupPanel2.add("Numbers", PropertySheet.Companion.forBean(NumberBean().also { numberBean = it }))
        rollupPanel2.add("Points", PropertySheet.Companion.forBean(PointBean()))
        rollupPanel2.add("a Point2D.Double", PropertySheet.Companion.forBean(Point2D.Double(3, 4)))
        rollupPanel2.add("a Point", PropertySheet.Companion.forBean(Point(3, 4)))
        rollupPanel2.add("a text area", JScrollPane(PropertySheet.Companion.forBean(jTextArea1)))
        pack()
    }
}